// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: group.sql

package repositories

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO "group" (
  group_id,
  group_name,
  created_by
) VALUES (
  $1, $2, $3
)
RETURNING group_id, group_name, created_by, created_at
`

type CreateGroupParams struct {
	GroupID   string `json:"group_id"`
	GroupName string `json:"group_name"`
	CreatedBy string `json:"created_by"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.GroupID, arg.GroupName, arg.CreatedBy)
	var i Group
	err := row.Scan(
		&i.GroupID,
		&i.GroupName,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM "group"
WHERE group_id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, groupID string) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, groupID)
	return err
}

const listGroupCreatedByUser = `-- name: ListGroupCreatedByUser :many
SELECT group_id, group_name, created_by, created_at FROM "group"
WHERE created_by = $1
ORDER BY group_id
`

func (q *Queries) ListGroupCreatedByUser(ctx context.Context, createdBy string) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroupCreatedByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.GroupID,
			&i.GroupName,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
